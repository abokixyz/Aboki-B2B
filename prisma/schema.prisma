// prisma/schema.prisma
generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "sqlite"
url      = env("DATABASE_URL")
}

enum UserRole {
ADMIN
USER
MANAGER
}

enum TxStatus {
PENDING
CONFIRMED
FAILED
CANCELLED
}

// New User model for authentication
model User {
id            String    @id @default(uuid())
email         String    @unique
password      String
firstName     String
lastName      String
companyId     String?   // Link to company
phoneNumber   String?
role          UserRole  @default(USER)
isActive      Boolean   @default(true)
emailVerified Boolean   @default(false)
lastLoginAt   DateTime?
resetToken    String?   // For password reset
resetTokenExpiry DateTime? // Reset token expiration
createdAt     DateTime  @default(now())
updatedAt     DateTime  @updatedAt

// Relations
apiKeys       ApiKey[]
company       Company?  @relation(fields: [companyId], references: [id])
userTransactions UserTransaction[]

@@map("users")
}

// API Keys for users
model ApiKey {
id          String    @id @default(uuid())
userId      String
publicKey   String    @unique
secretKey   String    // This will be hashed
name        String    @default("API Key")
permissions String    @default("READ,WRITE") // Changed from array to comma-separated string
isActive    Boolean   @default(true)
lastUsedAt  DateTime?
revokedAt   DateTime?
createdAt   DateTime  @default(now())
updatedAt   DateTime  @updatedAt

// Relations
user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@map("api_keys")
}

// Your existing Company model (enhanced)
model Company {
id            String   @id @default(uuid())
name          String
email         String   @unique
walletAddress String?
apiKey        String   @unique @default(uuid()) // Keep your existing company API key
isActive      Boolean  @default(true)
createdAt     DateTime @default(now())
updatedAt     DateTime @updatedAt

// Additional fields
phone           String?
address         String?
registrationNum String?
taxId           String?
website         String?
industry        String?

// Relations
users        User[]        // Users belonging to this company
transactions Transaction[]
contracts    Contract[]

@@map("companies")
}

// Your existing Transaction model (enhanced)
model Transaction {
id              String      @id @default(uuid())
companyId       String
txHash          String?     @unique
blockchainType  String      // ethereum, polygon, etc.
contractAddress String
functionName    String
parameters      Json
status          TxStatus    @default(PENDING)
gasUsed         String?     // Using String to handle BigInt
gasPrice        String?     // Using String to handle BigInt
errorMessage    String?
createdAt       DateTime    @default(now())
completedAt     DateTime?

// Enhanced fields
amount          Decimal?
currency        String?     @default("USD")
type           String?     // "PAYMENT", "TRANSFER", "CONTRACT", etc.
metadata       Json?       // Additional transaction data

// Relations
company         Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)

@@map("transactions")
}

// New model to track user-initiated transactions
model UserTransaction {
id            String    @id @default(uuid())
userId        String
companyId     String?
type          String    // "PAYMENT", "TRANSFER", "CONTRACT", etc.
amount        Decimal?
currency      String?   @default("USD")
status        String    @default("PENDING") // "PENDING", "COMPLETED", "FAILED", "CANCELLED"
blockchainTxId String?  // Transaction ID on blockchain
metadata      Json?     // Additional transaction data
createdAt     DateTime  @default(now())
updatedAt     DateTime  @updatedAt

// Relations
user User @relation(fields: [userId], references: [id])

@@map("user_transactions")
}

// Your existing Contract model
model Contract {
id              String   @id @default(uuid())
companyId       String
name            String
address         String
abi             Json
blockchainType  String
description     String?
isActive        Boolean  @default(true)
createdAt       DateTime @default(now())
updatedAt       DateTime @updatedAt

// Relations
company         Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)

@@unique([companyId, address])
@@map("contracts")
}

// Health check table
model HealthCheck {
id        String   @id @default(uuid())
status    String   @default("healthy")
timestamp DateTime @default(now())

@@map("health_checks")
}